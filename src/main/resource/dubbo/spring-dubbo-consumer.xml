<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://dubbo.apache.org/schema/dubbo
            http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <!-- 配置覆盖策略：
        方法级优先，接口级次之，全局配置再次之。
        如果级别一样，则消费方优先，提供方次之。-->

    <!-- 高可用：
        1、zookeeper注册中心岩机，仍然可以消费dubbo暴露的服务，因为服务提供者和服务消费者能通过本地缓存通信，本地缓存了提供方的访问地址以及端口
        2、服务提供者全部岩机后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复 -->

    <!-- 容错机制：在admin控制台将调用者的服务设置为容错，那么调用发生错误的时候，就直接返回空对象，保证释放资源，提高应用性能。
            1、Failover Cluster：失败自动切换，当出现失败，重试其它服务器 [1]。通常用于读操作，但重试会带来更长延迟。可通过 retries="2" 来设置重试次数(不含第一次)。
            2、Failfast Cluster：快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。
            3、Failsafe Cluster：失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。
            还有很多，具体查看dubbo官方文档
         服务降级：在admin控制台将调用者的服务降级了以后，那么这部服务的消费者可能调用失败就直接返回空，或者直接不调用，返回空，防止一些资源一直被占用
         这两个机制可以在admin界面动态地操作，实时监控服务情况，对服务动态处理，提高性能 -->

    <!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
    <dubbo:application name="consumer-test"/>
    <!-- 配置注册中心，这里使用zookeeper -->
    <dubbo:registry protocol="zookeeper" address="192.168.75.128:2181"/>
    <!-- 配置当前消费者的统一配置 -->
    <dubbo:consumer check="false" timeout="3000" retries="3"/>
    <!-- 生成远程服务代理，可以和本地bean一样使用demoService -->
    <dubbo:reference id="orderService" interface="com.yang.dubbo.api.service.OrderService" timeout="3000" retries="3" loadbalance="roundrobin">
        <!-- 可以具体的某个方法 -->
        <dubbo:method name="getOrders" timeout="2000" retries="2"/>
    </dubbo:reference>

</beans>