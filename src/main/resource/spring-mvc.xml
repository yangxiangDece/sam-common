<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- spring configuration start -->
    <!-- 配置自动扫描 -->
    <context:component-scan base-package="com.yang.springmvc"/>
    <!-- spring configuration end -->


    <!-- spring mvc configuration start -->
    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!-- 国际化资源配置文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n.i18n"/>
    </bean>
    <!-- 配置直接转发的页面，无须再经过Handler的方法 -->
    <mvc:view-controller path="/success" view-name="success"/>
    <!-- 加上上面这个配置以后，当后退时就会404，需要配置一下这个配置
    <mvc:annotation-driven /> 会自动注册RequestMappingHandlerMapping、RequestMappingHandlerAdapter 与ExceptionHandlerExceptionResolver 三个bean
    还将提供以下支持：
        支持使用 ConversionService 实例对表单参数进行类型转换；
        支持使用 @NumberFormat annotation、@DateTimeFormat；
        注解完成数据类型的格式化；
        支持使用 @Valid 注解对 JavaBean 实例进行 JSR 303 验证；
        支持使用 @RequestBody 和 @ResponseBody 注解；
        RequestMappingHandlerMapping和RequestMappingHandlerAdapter。
            第一个是HandlerMapping的实现类，它会处理@RequestMapping 注解，并将其注册到请求映射表中。
            第二个是HandlerAdapter的实现类，它是处理请求的适配器，说白了，就是确定调用哪个类的哪个方法，并且构造方法参数，返回值。-->
    <mvc:annotation-driven/>
    <!-- 处理静态资源
        default-servlet-handler 将在SpringMVC 上下文中定义一个DefaultServletHttpRequestHandler，
        它会对进入DispatcherServlet 的请求进行筛选，如果发现是没有经过映射的请求，就将该请求交由WEB 应用服务器默认的Servlet处理
        如果不是静态资源的请求，才由DispatcherServlet继续处理

        一般WEB应用服务器默认的Servlet 的名称都是default，若使用的WEB服务器的默认Servlet名称不是default，则需要经过default-servlet-name 属性显示指定，如下 -->
    <!--<mvc:default-servlet-handler default-servlet-name="servlet_name"/>-->
    <mvc:default-servlet-handler/>
    <!-- 配置拦截器 -->
    <mvc:interceptors>
        <!-- 配置拦截器作用的路径 -->
        <mvc:interceptor>
            <!-- 不包含哪些路径 -->
            <!--<mvc:exclude-mapping path="/user"/>-->
            <!-- 包含哪些路径 -->
            <mvc:mapping path="/user"/>
            <mvc:mapping path="/test"/>
            <bean class="com.yang.springmvc.interceptor.FirstInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- spring mvc configuration end -->

</beans>