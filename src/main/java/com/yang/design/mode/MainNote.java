package com.yang.design.mode;

/**
 * 设计原则：
 *      1、找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起
 *      2、针对接口编程，而不是针对实现编程
 *      3、多用组合，少用继承
 *      4、为了交互对象之间的松耦合设计而努力。
 *      5、开闭原则，类应该对扩展开放，对修改关闭
 *      6、依赖倒置原则，要依赖抽象，不要依赖具体类。不能让高层组件依赖底层组件，而且不管是高层组件还是底层组件，两者都应该依赖于抽象。
 *          所谓高层组件，是由其他底层组件定义其行为的类。例如，PizzaStore是个高层组件，因为它的行为是由比萨定义的。PizzaStore创建所有不同的比萨对象，而比萨本身属于底层组件。
 *      7、
 * 设计模式：
 *      1、策略模式：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
 *      2、观察者模式：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
 *          com.yang.design.mode.observer.myself包：自定义的观察者模式
 *          com.yang.design.mode.observer.jdk包：Java jdk自带的观察者模式(Observer(观察者)接口和Observable(可观察者)类)
 *      3、装饰模式：动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
 *          装饰者可以在所委托的被装饰者的行为之前/或之后，加上自己的行为，以达到特定的目的。
 *      4、工厂方法模式：定义了一个创建对象的接口，但由子类绝对要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
 *          工厂方法使用继承，把对象的创建委托给子类，子类实现工厂方法来创建对象
 *      5、抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类
 *          抽象工厂使用对象组合，对象的创建被实现在工厂接口所暴露出来的方法中
 *      6、单件模式：
 *
 */
public class MainNote {
}
