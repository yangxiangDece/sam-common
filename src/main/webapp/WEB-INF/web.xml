<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>

    <!-- filter必须配置在servlet之前 -->
    <!-- org.springframework.web.filter.HiddenHttpMethodFilter，配置请求过滤器，将GET、POST转换为PUT、DELETE，如果不用REST风格就可以不配置这个过滤器 -->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 配置上下文载入器，作用：载入除DispatcherServlet载入的配置文件之外的其他上下文配置文件，最常用的上下文载入器是一个Servlet监听器，即ContextLoaderListener
        ContextLoaderListener的作用就是启动web容器时，自动装配ApplicationContext的配置信息，因为它实现了ServletContextListener接口，在web.xml配置这个监听器，
        启动容器时，就会默认执行它实现的方法，使用ServletContextListener接口，开发者能够在为客户端请求提供服务之前向ServletContext中添加任意的对象。
        每一个Web应用都有一个ServletContext与之相关联，ServletContext对象在应用启动时被创建，在应用关闭时被销毁。ServletContext在全局范围内有效，类似于应用中的一个全局变量。
        在ServletContextListener中的核心逻辑便是初始化WebApplicationContext 实例并存放至ServletContext中。 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 配置DispatcherServlet -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 使用Spring MVC默认的配置文件路径：/WEB-INF/<servlet-name>-servlet.xml，也就是：/WEB-INF/dispatcherServlet-servlet.xml -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <!-- 表示这个Servlet在当前web应用被加载的时候就创建，而不是等第一次请求的时候才创建 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


</web-app>
